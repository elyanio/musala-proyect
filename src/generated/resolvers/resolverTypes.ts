// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { User, Booking, Ad, BlockedDay } from '../prisma-client';
import { Context } from '../../context';

export type AdOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'image_ASC'
  | 'image_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'ranking_ASC'
  | 'ranking_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC';
export type OpsEnum = 'BLOCKED' | 'AVAILABLE';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface AdWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    title?: string | null;
    title_not?: string | null;
    title_in?: string[] | null;
    title_not_in?: string[] | null;
    title_lt?: string | null;
    title_lte?: string | null;
    title_gt?: string | null;
    title_gte?: string | null;
    title_contains?: string | null;
    title_not_contains?: string | null;
    title_starts_with?: string | null;
    title_not_starts_with?: string | null;
    title_ends_with?: string | null;
    title_not_ends_with?: string | null;
    description?: string | null;
    description_not?: string | null;
    description_in?: string[] | null;
    description_not_in?: string[] | null;
    description_lt?: string | null;
    description_lte?: string | null;
    description_gt?: string | null;
    description_gte?: string | null;
    description_contains?: string | null;
    description_not_contains?: string | null;
    description_starts_with?: string | null;
    description_not_starts_with?: string | null;
    description_ends_with?: string | null;
    description_not_ends_with?: string | null;
    image?: string | null;
    image_not?: string | null;
    image_in?: string[] | null;
    image_not_in?: string[] | null;
    image_lt?: string | null;
    image_lte?: string | null;
    image_gt?: string | null;
    image_gte?: string | null;
    image_contains?: string | null;
    image_not_contains?: string | null;
    image_starts_with?: string | null;
    image_not_starts_with?: string | null;
    image_ends_with?: string | null;
    image_not_ends_with?: string | null;
    price?: number | null;
    price_not?: number | null;
    price_in?: number[] | null;
    price_not_in?: number[] | null;
    price_lt?: number | null;
    price_lte?: number | null;
    price_gt?: number | null;
    price_gte?: number | null;
    ranking?: number | null;
    ranking_not?: number | null;
    ranking_in?: number[] | null;
    ranking_not_in?: number[] | null;
    ranking_lt?: number | null;
    ranking_lte?: number | null;
    ranking_gt?: number | null;
    ranking_gte?: number | null;
    host?: UserWhereInput | null;
    bookings_every?: BookingWhereInput | null;
    bookings_some?: BookingWhereInput | null;
    bookings_none?: BookingWhereInput | null;
    blockedDays_every?: BlockedDayWhereInput | null;
    blockedDays_some?: BlockedDayWhereInput | null;
    blockedDays_none?: BlockedDayWhereInput | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    AND?: AdWhereInput[] | null;
    OR?: AdWhereInput[] | null;
    NOT?: AdWhereInput[] | null;
  }
  export interface AdWhereUniqueInput {
    id?: string | null;
  }
  export interface UserWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    fullName?: string | null;
    fullName_not?: string | null;
    fullName_in?: string[] | null;
    fullName_not_in?: string[] | null;
    fullName_lt?: string | null;
    fullName_lte?: string | null;
    fullName_gt?: string | null;
    fullName_gte?: string | null;
    fullName_contains?: string | null;
    fullName_not_contains?: string | null;
    fullName_starts_with?: string | null;
    fullName_not_starts_with?: string | null;
    fullName_ends_with?: string | null;
    fullName_not_ends_with?: string | null;
    password?: string | null;
    password_not?: string | null;
    password_in?: string[] | null;
    password_not_in?: string[] | null;
    password_lt?: string | null;
    password_lte?: string | null;
    password_gt?: string | null;
    password_gte?: string | null;
    password_contains?: string | null;
    password_not_contains?: string | null;
    password_starts_with?: string | null;
    password_not_starts_with?: string | null;
    password_ends_with?: string | null;
    password_not_ends_with?: string | null;
    phone?: string | null;
    phone_not?: string | null;
    phone_in?: string[] | null;
    phone_not_in?: string[] | null;
    phone_lt?: string | null;
    phone_lte?: string | null;
    phone_gt?: string | null;
    phone_gte?: string | null;
    phone_contains?: string | null;
    phone_not_contains?: string | null;
    phone_starts_with?: string | null;
    phone_not_starts_with?: string | null;
    phone_ends_with?: string | null;
    phone_not_ends_with?: string | null;
    role?: string | null;
    role_not?: string | null;
    role_in?: string[] | null;
    role_not_in?: string[] | null;
    role_lt?: string | null;
    role_lte?: string | null;
    role_gt?: string | null;
    role_gte?: string | null;
    role_contains?: string | null;
    role_not_contains?: string | null;
    role_starts_with?: string | null;
    role_not_starts_with?: string | null;
    role_ends_with?: string | null;
    role_not_ends_with?: string | null;
    bookings_every?: BookingWhereInput | null;
    bookings_some?: BookingWhereInput | null;
    bookings_none?: BookingWhereInput | null;
    ad?: AdWhereInput | null;
    token?: string | null;
    token_not?: string | null;
    token_in?: string[] | null;
    token_not_in?: string[] | null;
    token_lt?: string | null;
    token_lte?: string | null;
    token_gt?: string | null;
    token_gte?: string | null;
    token_contains?: string | null;
    token_not_contains?: string | null;
    token_starts_with?: string | null;
    token_not_starts_with?: string | null;
    token_ends_with?: string | null;
    token_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    AND?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    NOT?: UserWhereInput[] | null;
  }
  export interface BookingWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    checkin?: string | null;
    checkin_not?: string | null;
    checkin_in?: string[] | null;
    checkin_not_in?: string[] | null;
    checkin_lt?: string | null;
    checkin_lte?: string | null;
    checkin_gt?: string | null;
    checkin_gte?: string | null;
    checkout?: string | null;
    checkout_not?: string | null;
    checkout_in?: string[] | null;
    checkout_not_in?: string[] | null;
    checkout_lt?: string | null;
    checkout_lte?: string | null;
    checkout_gt?: string | null;
    checkout_gte?: string | null;
    totalPaid?: number | null;
    totalPaid_not?: number | null;
    totalPaid_in?: number[] | null;
    totalPaid_not_in?: number[] | null;
    totalPaid_lt?: number | null;
    totalPaid_lte?: number | null;
    totalPaid_gt?: number | null;
    totalPaid_gte?: number | null;
    pax?: number | null;
    pax_not?: number | null;
    pax_in?: number[] | null;
    pax_not_in?: number[] | null;
    pax_lt?: number | null;
    pax_lte?: number | null;
    pax_gt?: number | null;
    pax_gte?: number | null;
    client?: UserWhereInput | null;
    ad?: AdWhereInput | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    AND?: BookingWhereInput[] | null;
    OR?: BookingWhereInput[] | null;
    NOT?: BookingWhereInput[] | null;
  }
  export interface BlockedDayWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    checkin?: string | null;
    checkin_not?: string | null;
    checkin_in?: string[] | null;
    checkin_not_in?: string[] | null;
    checkin_lt?: string | null;
    checkin_lte?: string | null;
    checkin_gt?: string | null;
    checkin_gte?: string | null;
    checkout?: string | null;
    checkout_not?: string | null;
    checkout_in?: string[] | null;
    checkout_not_in?: string[] | null;
    checkout_lt?: string | null;
    checkout_lte?: string | null;
    checkout_gt?: string | null;
    checkout_gte?: string | null;
    byBooking?: boolean | null;
    byBooking_not?: boolean | null;
    ad?: AdWhereInput | null;
    AND?: BlockedDayWhereInput[] | null;
    OR?: BlockedDayWhereInput[] | null;
    NOT?: BlockedDayWhereInput[] | null;
  }

  export interface ArgsAds {
    where?: AdWhereInput | null;
    orderBy?: AdOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsAd {
    where: AdWhereUniqueInput;
  }

  export type CurrentUserResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>;
      };

  export type AdsResolver =
    | ((
        parent: undefined,
        args: ArgsAds,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Array<Ad | null> | Promise<Array<Ad | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsAds,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Array<Ad | null> | Promise<Array<Ad | null>>;
      };

  export type AdResolver =
    | ((
        parent: undefined,
        args: ArgsAd,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Ad | null | Promise<Ad | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsAd,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ad | null | Promise<Ad | null>;
      };

  export interface Type {
    currentUser:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>;
        };

    ads:
      | ((
          parent: undefined,
          args: ArgsAds,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Array<Ad | null> | Promise<Array<Ad | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsAds,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Array<Ad | null> | Promise<Array<Ad | null>>;
        };

    ad:
      | ((
          parent: undefined,
          args: ArgsAd,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ad | null | Promise<Ad | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsAd,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Ad | null | Promise<Ad | null>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    fullName: (parent: User) => parent.fullName,
    password: (parent: User) => parent.password,
    phone: (parent: User) => parent.phone,
    role: (parent: User) => parent.role,
    token: (parent: User) => (parent.token === undefined ? null : parent.token),
    createdAt: (parent: User) => parent.createdAt,
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type FullNameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type PasswordResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type PhoneResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type RoleResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type BookingsResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Booking[] | Promise<Booking[]>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Booking[] | Promise<Booking[]>;
      };

  export type AdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Ad | null | Promise<Ad | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ad | null | Promise<Ad | null>;
      };

  export type TokenResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;
      };

  export type CreatedAtResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    fullName:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    password:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    phone:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    role:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    bookings:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Booking[] | Promise<Booking[]>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Booking[] | Promise<Booking[]>;
        };

    ad:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ad | null | Promise<Ad | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Ad | null | Promise<Ad | null>;
        };

    token:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>;
        };

    createdAt:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };
  }
}

export namespace BookingResolvers {
  export const defaultResolvers = {
    id: (parent: Booking) => parent.id,
    checkin: (parent: Booking) => parent.checkin,
    checkout: (parent: Booking) => parent.checkout,
    totalPaid: (parent: Booking) => parent.totalPaid,
    pax: (parent: Booking) => parent.pax,
    createdAt: (parent: Booking) => parent.createdAt,
  };

  export type IdResolver =
    | ((
        parent: Booking,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type CheckinResolver =
    | ((
        parent: Booking,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type CheckoutResolver =
    | ((
        parent: Booking,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type TotalPaidResolver =
    | ((
        parent: Booking,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>;
      };

  export type PaxResolver =
    | ((
        parent: Booking,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>;
      };

  export type ClientResolver =
    | ((
        parent: Booking,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>;
      };

  export type AdResolver =
    | ((
        parent: Booking,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Ad | Promise<Ad>)
    | {
        fragment: string;
        resolve: (
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ad | Promise<Ad>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Booking,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Booking,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    checkin:
      | ((
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Booking,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    checkout:
      | ((
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Booking,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    totalPaid:
      | ((
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Booking,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => number | Promise<number>;
        };

    pax:
      | ((
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Booking,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => number | Promise<number>;
        };

    client:
      | ((
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Booking,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | Promise<User>;
        };

    ad:
      | ((
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ad | Promise<Ad>)
      | {
          fragment: string;
          resolve: (
            parent: Booking,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Ad | Promise<Ad>;
        };

    createdAt:
      | ((
          parent: Booking,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Booking,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };
  }
}

export namespace AdResolvers {
  export const defaultResolvers = {
    id: (parent: Ad) => parent.id,
    title: (parent: Ad) => parent.title,
    description: (parent: Ad) => parent.description,
    image: (parent: Ad) => parent.image,
    price: (parent: Ad) => parent.price,
    ranking: (parent: Ad) => parent.ranking,
    createdAt: (parent: Ad) => parent.createdAt,
  };

  export type IdResolver =
    | ((
        parent: Ad,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type TitleResolver =
    | ((
        parent: Ad,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type DescriptionResolver =
    | ((
        parent: Ad,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type ImageResolver =
    | ((
        parent: Ad,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type PriceResolver =
    | ((
        parent: Ad,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>;
      };

  export type RankingResolver =
    | ((
        parent: Ad,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>;
      };

  export type HostResolver =
    | ((
        parent: Ad,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>;
      };

  export type BookingsResolver =
    | ((
        parent: Ad,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Booking[] | Promise<Booking[]>)
    | {
        fragment: string;
        resolve: (
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Booking[] | Promise<Booking[]>;
      };

  export type BlockedDaysResolver =
    | ((
        parent: Ad,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => BlockedDay[] | Promise<BlockedDay[]>)
    | {
        fragment: string;
        resolve: (
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => BlockedDay[] | Promise<BlockedDay[]>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Ad,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Ad,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    title:
      | ((
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Ad,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    description:
      | ((
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Ad,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    image:
      | ((
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Ad,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    price:
      | ((
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Ad,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => number | Promise<number>;
        };

    ranking:
      | ((
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Ad,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => number | Promise<number>;
        };

    host:
      | ((
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Ad,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | Promise<User>;
        };

    bookings:
      | ((
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Booking[] | Promise<Booking[]>)
      | {
          fragment: string;
          resolve: (
            parent: Ad,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Booking[] | Promise<Booking[]>;
        };

    blockedDays:
      | ((
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => BlockedDay[] | Promise<BlockedDay[]>)
      | {
          fragment: string;
          resolve: (
            parent: Ad,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => BlockedDay[] | Promise<BlockedDay[]>;
        };

    createdAt:
      | ((
          parent: Ad,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Ad,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };
  }
}

export namespace BlockedDayResolvers {
  export const defaultResolvers = {
    id: (parent: BlockedDay) => parent.id,
    checkin: (parent: BlockedDay) => parent.checkin,
    checkout: (parent: BlockedDay) => parent.checkout,
    byBooking: (parent: BlockedDay) =>
      parent.byBooking === undefined ? null : parent.byBooking,
  };

  export type IdResolver =
    | ((
        parent: BlockedDay,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: BlockedDay,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type CheckinResolver =
    | ((
        parent: BlockedDay,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: BlockedDay,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type CheckoutResolver =
    | ((
        parent: BlockedDay,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: BlockedDay,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type ByBookingResolver =
    | ((
        parent: BlockedDay,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: BlockedDay,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | null | Promise<boolean | null>;
      };

  export type AdResolver =
    | ((
        parent: BlockedDay,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Ad | Promise<Ad>)
    | {
        fragment: string;
        resolve: (
          parent: BlockedDay,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ad | Promise<Ad>;
      };

  export interface Type {
    id:
      | ((
          parent: BlockedDay,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: BlockedDay,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    checkin:
      | ((
          parent: BlockedDay,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: BlockedDay,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    checkout:
      | ((
          parent: BlockedDay,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: BlockedDay,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    byBooking:
      | ((
          parent: BlockedDay,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: BlockedDay,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | null | Promise<boolean | null>;
        };

    ad:
      | ((
          parent: BlockedDay,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ad | Promise<Ad>)
      | {
          fragment: string;
          resolve: (
            parent: BlockedDay,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Ad | Promise<Ad>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface SignInInput {
    email: string;
    password: string;
  }
  export interface SignUpInput {
    email: string;
    fullName: string;
    password: string;
    phone: string;
  }
  export interface BookingInput {
    checkin: string;
    checkout: string;
    clientId: string;
    pax: number;
    adId: string;
  }
  export interface BlockedDayUpdateInput {
    checkin?: string | null;
    checkout?: string | null;
    byBooking?: boolean | null;
    ad?: AdUpdateOneRequiredWithoutBlockedDaysInput | null;
  }
  export interface BlockedDayWhereUniqueInput {
    id?: string | null;
  }
  export interface UpdateAvailableInput {
    checkin: string;
    checkout: string;
    ops: OpsEnum;
    adId: string;
  }
  export interface AdUpdateOneRequiredWithoutBlockedDaysInput {
    create?: AdCreateWithoutBlockedDaysInput | null;
    update?: AdUpdateWithoutBlockedDaysDataInput | null;
    upsert?: AdUpsertWithoutBlockedDaysInput | null;
    connect?: AdWhereUniqueInput | null;
  }
  export interface AdCreateWithoutBlockedDaysInput {
    id?: string | null;
    title: string;
    description: string;
    image: string;
    price: number;
    ranking: number;
    host: UserCreateOneWithoutAdInput;
    bookings?: BookingCreateManyWithoutAdInput | null;
  }
  export interface AdUpdateWithoutBlockedDaysDataInput {
    title?: string | null;
    description?: string | null;
    image?: string | null;
    price?: number | null;
    ranking?: number | null;
    host?: UserUpdateOneRequiredWithoutAdInput | null;
    bookings?: BookingUpdateManyWithoutAdInput | null;
  }
  export interface AdUpsertWithoutBlockedDaysInput {
    update: AdUpdateWithoutBlockedDaysDataInput;
    create: AdCreateWithoutBlockedDaysInput;
  }
  export interface AdWhereUniqueInput {
    id?: string | null;
  }
  export interface UserCreateOneWithoutAdInput {
    create?: UserCreateWithoutAdInput | null;
    connect?: UserWhereUniqueInput | null;
  }
  export interface BookingCreateManyWithoutAdInput {
    create?: BookingCreateWithoutAdInput[] | null;
    connect?: BookingWhereUniqueInput[] | null;
  }
  export interface UserUpdateOneRequiredWithoutAdInput {
    create?: UserCreateWithoutAdInput | null;
    update?: UserUpdateWithoutAdDataInput | null;
    upsert?: UserUpsertWithoutAdInput | null;
    connect?: UserWhereUniqueInput | null;
  }
  export interface BookingUpdateManyWithoutAdInput {
    create?: BookingCreateWithoutAdInput[] | null;
    delete?: BookingWhereUniqueInput[] | null;
    connect?: BookingWhereUniqueInput[] | null;
    set?: BookingWhereUniqueInput[] | null;
    disconnect?: BookingWhereUniqueInput[] | null;
    update?: BookingUpdateWithWhereUniqueWithoutAdInput[] | null;
    upsert?: BookingUpsertWithWhereUniqueWithoutAdInput[] | null;
    deleteMany?: BookingScalarWhereInput[] | null;
    updateMany?: BookingUpdateManyWithWhereNestedInput[] | null;
  }
  export interface UserCreateWithoutAdInput {
    id?: string | null;
    email: string;
    fullName: string;
    password: string;
    phone: string;
    role: string;
    bookings?: BookingCreateManyWithoutClientInput | null;
    token?: string | null;
  }
  export interface UserWhereUniqueInput {
    id?: string | null;
    email?: string | null;
  }
  export interface BookingCreateWithoutAdInput {
    id?: string | null;
    checkin: string;
    checkout: string;
    totalPaid: number;
    pax: number;
    client: UserCreateOneWithoutBookingsInput;
  }
  export interface BookingWhereUniqueInput {
    id?: string | null;
  }
  export interface UserUpdateWithoutAdDataInput {
    email?: string | null;
    fullName?: string | null;
    password?: string | null;
    phone?: string | null;
    role?: string | null;
    bookings?: BookingUpdateManyWithoutClientInput | null;
    token?: string | null;
  }
  export interface UserUpsertWithoutAdInput {
    update: UserUpdateWithoutAdDataInput;
    create: UserCreateWithoutAdInput;
  }
  export interface BookingUpdateWithWhereUniqueWithoutAdInput {
    where: BookingWhereUniqueInput;
    data: BookingUpdateWithoutAdDataInput;
  }
  export interface BookingUpsertWithWhereUniqueWithoutAdInput {
    where: BookingWhereUniqueInput;
    update: BookingUpdateWithoutAdDataInput;
    create: BookingCreateWithoutAdInput;
  }
  export interface BookingScalarWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    checkin?: string | null;
    checkin_not?: string | null;
    checkin_in?: string[] | null;
    checkin_not_in?: string[] | null;
    checkin_lt?: string | null;
    checkin_lte?: string | null;
    checkin_gt?: string | null;
    checkin_gte?: string | null;
    checkout?: string | null;
    checkout_not?: string | null;
    checkout_in?: string[] | null;
    checkout_not_in?: string[] | null;
    checkout_lt?: string | null;
    checkout_lte?: string | null;
    checkout_gt?: string | null;
    checkout_gte?: string | null;
    totalPaid?: number | null;
    totalPaid_not?: number | null;
    totalPaid_in?: number[] | null;
    totalPaid_not_in?: number[] | null;
    totalPaid_lt?: number | null;
    totalPaid_lte?: number | null;
    totalPaid_gt?: number | null;
    totalPaid_gte?: number | null;
    pax?: number | null;
    pax_not?: number | null;
    pax_in?: number[] | null;
    pax_not_in?: number[] | null;
    pax_lt?: number | null;
    pax_lte?: number | null;
    pax_gt?: number | null;
    pax_gte?: number | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    AND?: BookingScalarWhereInput[] | null;
    OR?: BookingScalarWhereInput[] | null;
    NOT?: BookingScalarWhereInput[] | null;
  }
  export interface BookingUpdateManyWithWhereNestedInput {
    where: BookingScalarWhereInput;
    data: BookingUpdateManyDataInput;
  }
  export interface BookingCreateManyWithoutClientInput {
    create?: BookingCreateWithoutClientInput[] | null;
    connect?: BookingWhereUniqueInput[] | null;
  }
  export interface UserCreateOneWithoutBookingsInput {
    create?: UserCreateWithoutBookingsInput | null;
    connect?: UserWhereUniqueInput | null;
  }
  export interface BookingUpdateManyWithoutClientInput {
    create?: BookingCreateWithoutClientInput[] | null;
    delete?: BookingWhereUniqueInput[] | null;
    connect?: BookingWhereUniqueInput[] | null;
    set?: BookingWhereUniqueInput[] | null;
    disconnect?: BookingWhereUniqueInput[] | null;
    update?: BookingUpdateWithWhereUniqueWithoutClientInput[] | null;
    upsert?: BookingUpsertWithWhereUniqueWithoutClientInput[] | null;
    deleteMany?: BookingScalarWhereInput[] | null;
    updateMany?: BookingUpdateManyWithWhereNestedInput[] | null;
  }
  export interface BookingUpdateWithoutAdDataInput {
    checkin?: string | null;
    checkout?: string | null;
    totalPaid?: number | null;
    pax?: number | null;
    client?: UserUpdateOneRequiredWithoutBookingsInput | null;
  }
  export interface BookingUpdateManyDataInput {
    checkin?: string | null;
    checkout?: string | null;
    totalPaid?: number | null;
    pax?: number | null;
  }
  export interface BookingCreateWithoutClientInput {
    id?: string | null;
    checkin: string;
    checkout: string;
    totalPaid: number;
    pax: number;
    ad: AdCreateOneWithoutBookingsInput;
  }
  export interface UserCreateWithoutBookingsInput {
    id?: string | null;
    email: string;
    fullName: string;
    password: string;
    phone: string;
    role: string;
    ad?: AdCreateOneWithoutHostInput | null;
    token?: string | null;
  }
  export interface BookingUpdateWithWhereUniqueWithoutClientInput {
    where: BookingWhereUniqueInput;
    data: BookingUpdateWithoutClientDataInput;
  }
  export interface BookingUpsertWithWhereUniqueWithoutClientInput {
    where: BookingWhereUniqueInput;
    update: BookingUpdateWithoutClientDataInput;
    create: BookingCreateWithoutClientInput;
  }
  export interface UserUpdateOneRequiredWithoutBookingsInput {
    create?: UserCreateWithoutBookingsInput | null;
    update?: UserUpdateWithoutBookingsDataInput | null;
    upsert?: UserUpsertWithoutBookingsInput | null;
    connect?: UserWhereUniqueInput | null;
  }
  export interface AdCreateOneWithoutBookingsInput {
    create?: AdCreateWithoutBookingsInput | null;
    connect?: AdWhereUniqueInput | null;
  }
  export interface AdCreateOneWithoutHostInput {
    create?: AdCreateWithoutHostInput | null;
    connect?: AdWhereUniqueInput | null;
  }
  export interface BookingUpdateWithoutClientDataInput {
    checkin?: string | null;
    checkout?: string | null;
    totalPaid?: number | null;
    pax?: number | null;
    ad?: AdUpdateOneRequiredWithoutBookingsInput | null;
  }
  export interface UserUpdateWithoutBookingsDataInput {
    email?: string | null;
    fullName?: string | null;
    password?: string | null;
    phone?: string | null;
    role?: string | null;
    ad?: AdUpdateOneWithoutHostInput | null;
    token?: string | null;
  }
  export interface UserUpsertWithoutBookingsInput {
    update: UserUpdateWithoutBookingsDataInput;
    create: UserCreateWithoutBookingsInput;
  }
  export interface AdCreateWithoutBookingsInput {
    id?: string | null;
    title: string;
    description: string;
    image: string;
    price: number;
    ranking: number;
    host: UserCreateOneWithoutAdInput;
    blockedDays?: BlockedDayCreateManyWithoutAdInput | null;
  }
  export interface AdCreateWithoutHostInput {
    id?: string | null;
    title: string;
    description: string;
    image: string;
    price: number;
    ranking: number;
    bookings?: BookingCreateManyWithoutAdInput | null;
    blockedDays?: BlockedDayCreateManyWithoutAdInput | null;
  }
  export interface AdUpdateOneRequiredWithoutBookingsInput {
    create?: AdCreateWithoutBookingsInput | null;
    update?: AdUpdateWithoutBookingsDataInput | null;
    upsert?: AdUpsertWithoutBookingsInput | null;
    connect?: AdWhereUniqueInput | null;
  }
  export interface AdUpdateOneWithoutHostInput {
    create?: AdCreateWithoutHostInput | null;
    update?: AdUpdateWithoutHostDataInput | null;
    upsert?: AdUpsertWithoutHostInput | null;
    delete?: boolean | null;
    disconnect?: boolean | null;
    connect?: AdWhereUniqueInput | null;
  }
  export interface BlockedDayCreateManyWithoutAdInput {
    create?: BlockedDayCreateWithoutAdInput[] | null;
    connect?: BlockedDayWhereUniqueInput[] | null;
  }
  export interface AdUpdateWithoutBookingsDataInput {
    title?: string | null;
    description?: string | null;
    image?: string | null;
    price?: number | null;
    ranking?: number | null;
    host?: UserUpdateOneRequiredWithoutAdInput | null;
    blockedDays?: BlockedDayUpdateManyWithoutAdInput | null;
  }
  export interface AdUpsertWithoutBookingsInput {
    update: AdUpdateWithoutBookingsDataInput;
    create: AdCreateWithoutBookingsInput;
  }
  export interface AdUpdateWithoutHostDataInput {
    title?: string | null;
    description?: string | null;
    image?: string | null;
    price?: number | null;
    ranking?: number | null;
    bookings?: BookingUpdateManyWithoutAdInput | null;
    blockedDays?: BlockedDayUpdateManyWithoutAdInput | null;
  }
  export interface AdUpsertWithoutHostInput {
    update: AdUpdateWithoutHostDataInput;
    create: AdCreateWithoutHostInput;
  }
  export interface BlockedDayCreateWithoutAdInput {
    id?: string | null;
    checkin: string;
    checkout: string;
    byBooking?: boolean | null;
  }
  export interface BlockedDayUpdateManyWithoutAdInput {
    create?: BlockedDayCreateWithoutAdInput[] | null;
    delete?: BlockedDayWhereUniqueInput[] | null;
    connect?: BlockedDayWhereUniqueInput[] | null;
    set?: BlockedDayWhereUniqueInput[] | null;
    disconnect?: BlockedDayWhereUniqueInput[] | null;
    update?: BlockedDayUpdateWithWhereUniqueWithoutAdInput[] | null;
    upsert?: BlockedDayUpsertWithWhereUniqueWithoutAdInput[] | null;
    deleteMany?: BlockedDayScalarWhereInput[] | null;
    updateMany?: BlockedDayUpdateManyWithWhereNestedInput[] | null;
  }
  export interface BlockedDayUpdateWithWhereUniqueWithoutAdInput {
    where: BlockedDayWhereUniqueInput;
    data: BlockedDayUpdateWithoutAdDataInput;
  }
  export interface BlockedDayUpsertWithWhereUniqueWithoutAdInput {
    where: BlockedDayWhereUniqueInput;
    update: BlockedDayUpdateWithoutAdDataInput;
    create: BlockedDayCreateWithoutAdInput;
  }
  export interface BlockedDayScalarWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    checkin?: string | null;
    checkin_not?: string | null;
    checkin_in?: string[] | null;
    checkin_not_in?: string[] | null;
    checkin_lt?: string | null;
    checkin_lte?: string | null;
    checkin_gt?: string | null;
    checkin_gte?: string | null;
    checkout?: string | null;
    checkout_not?: string | null;
    checkout_in?: string[] | null;
    checkout_not_in?: string[] | null;
    checkout_lt?: string | null;
    checkout_lte?: string | null;
    checkout_gt?: string | null;
    checkout_gte?: string | null;
    byBooking?: boolean | null;
    byBooking_not?: boolean | null;
    AND?: BlockedDayScalarWhereInput[] | null;
    OR?: BlockedDayScalarWhereInput[] | null;
    NOT?: BlockedDayScalarWhereInput[] | null;
  }
  export interface BlockedDayUpdateManyWithWhereNestedInput {
    where: BlockedDayScalarWhereInput;
    data: BlockedDayUpdateManyDataInput;
  }
  export interface BlockedDayUpdateWithoutAdDataInput {
    checkin?: string | null;
    checkout?: string | null;
    byBooking?: boolean | null;
  }
  export interface BlockedDayUpdateManyDataInput {
    checkin?: string | null;
    checkout?: string | null;
    byBooking?: boolean | null;
  }

  export interface ArgsSignIn {
    data: SignInInput;
  }

  export interface ArgsSignUp {
    data: SignUpInput;
  }

  export interface ArgsCreateBooking {
    data: BookingInput;
  }

  export interface ArgsUpdateBlockedDay {
    data: BlockedDayUpdateInput;
    where: BlockedDayWhereUniqueInput;
  }

  export interface ArgsDeleteBlockedDay {
    where: BlockedDayWhereUniqueInput;
  }

  export interface ArgsUpdateAvailability {
    data: UpdateAvailableInput;
  }

  export type SignInResolver =
    | ((
        parent: undefined,
        args: ArgsSignIn,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSignIn,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>;
      };

  export type SignUpResolver =
    | ((
        parent: undefined,
        args: ArgsSignUp,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSignUp,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>;
      };

  export type CreateBookingResolver =
    | ((
        parent: undefined,
        args: ArgsCreateBooking,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Booking | Promise<Booking>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateBooking,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Booking | Promise<Booking>;
      };

  export type UpdateBlockedDayResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateBlockedDay,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => BlockedDay | null | Promise<BlockedDay | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateBlockedDay,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => BlockedDay | null | Promise<BlockedDay | null>;
      };

  export type DeleteBlockedDayResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteBlockedDay,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => BlockedDay | null | Promise<BlockedDay | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteBlockedDay,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => BlockedDay | null | Promise<BlockedDay | null>;
      };

  export type UpdateAvailabilityResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateAvailability,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateAvailability,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>;
      };

  export interface Type {
    signIn:
      | ((
          parent: undefined,
          args: ArgsSignIn,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSignIn,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>;
        };

    signUp:
      | ((
          parent: undefined,
          args: ArgsSignUp,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSignUp,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>;
        };

    createBooking:
      | ((
          parent: undefined,
          args: ArgsCreateBooking,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Booking | Promise<Booking>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateBooking,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Booking | Promise<Booking>;
        };

    updateBlockedDay:
      | ((
          parent: undefined,
          args: ArgsUpdateBlockedDay,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => BlockedDay | null | Promise<BlockedDay | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateBlockedDay,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => BlockedDay | null | Promise<BlockedDay | null>;
        };

    deleteBlockedDay:
      | ((
          parent: undefined,
          args: ArgsDeleteBlockedDay,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => BlockedDay | null | Promise<BlockedDay | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteBlockedDay,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => BlockedDay | null | Promise<BlockedDay | null>;
        };

    updateAvailability:
      | ((
          parent: undefined,
          args: ArgsUpdateAvailability,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateAvailability,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Booking: BookingResolvers.Type;
  Ad: AdResolvers.Type;
  BlockedDay: BlockedDayResolvers.Type;
  Mutation: MutationResolvers.Type;
}

// @ts-ignore
declare module 'graphql-tools' {
  interface IResolvers extends Resolvers {}
}
