// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  ad: (where?: AdWhereInput) => Promise<boolean>;
  blockedDay: (where?: BlockedDayWhereInput) => Promise<boolean>;
  booking: (where?: BookingWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  ad: (where: AdWhereUniqueInput) => AdNullablePromise;
  ads: (args?: {
    where?: AdWhereInput;
    orderBy?: AdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Ad>;
  adsConnection: (args?: {
    where?: AdWhereInput;
    orderBy?: AdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AdConnectionPromise;
  blockedDay: (where: BlockedDayWhereUniqueInput) => BlockedDayNullablePromise;
  blockedDays: (args?: {
    where?: BlockedDayWhereInput;
    orderBy?: BlockedDayOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<BlockedDay>;
  blockedDaysConnection: (args?: {
    where?: BlockedDayWhereInput;
    orderBy?: BlockedDayOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BlockedDayConnectionPromise;
  booking: (where: BookingWhereUniqueInput) => BookingNullablePromise;
  bookings: (args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Booking>;
  bookingsConnection: (args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookingConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAd: (data: AdCreateInput) => AdPromise;
  updateAd: (args: {
    data: AdUpdateInput;
    where: AdWhereUniqueInput;
  }) => AdPromise;
  updateManyAds: (args: {
    data: AdUpdateManyMutationInput;
    where?: AdWhereInput;
  }) => BatchPayloadPromise;
  upsertAd: (args: {
    where: AdWhereUniqueInput;
    create: AdCreateInput;
    update: AdUpdateInput;
  }) => AdPromise;
  deleteAd: (where: AdWhereUniqueInput) => AdPromise;
  deleteManyAds: (where?: AdWhereInput) => BatchPayloadPromise;
  createBlockedDay: (data: BlockedDayCreateInput) => BlockedDayPromise;
  updateBlockedDay: (args: {
    data: BlockedDayUpdateInput;
    where: BlockedDayWhereUniqueInput;
  }) => BlockedDayPromise;
  updateManyBlockedDays: (args: {
    data: BlockedDayUpdateManyMutationInput;
    where?: BlockedDayWhereInput;
  }) => BatchPayloadPromise;
  upsertBlockedDay: (args: {
    where: BlockedDayWhereUniqueInput;
    create: BlockedDayCreateInput;
    update: BlockedDayUpdateInput;
  }) => BlockedDayPromise;
  deleteBlockedDay: (where: BlockedDayWhereUniqueInput) => BlockedDayPromise;
  deleteManyBlockedDays: (where?: BlockedDayWhereInput) => BatchPayloadPromise;
  createBooking: (data: BookingCreateInput) => BookingPromise;
  updateBooking: (args: {
    data: BookingUpdateInput;
    where: BookingWhereUniqueInput;
  }) => BookingPromise;
  updateManyBookings: (args: {
    data: BookingUpdateManyMutationInput;
    where?: BookingWhereInput;
  }) => BatchPayloadPromise;
  upsertBooking: (args: {
    where: BookingWhereUniqueInput;
    create: BookingCreateInput;
    update: BookingUpdateInput;
  }) => BookingPromise;
  deleteBooking: (where: BookingWhereUniqueInput) => BookingPromise;
  deleteManyBookings: (where?: BookingWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  ad: (where?: AdSubscriptionWhereInput) => AdSubscriptionPayloadSubscription;
  blockedDay: (
    where?: BlockedDaySubscriptionWhereInput
  ) => BlockedDaySubscriptionPayloadSubscription;
  booking: (
    where?: BookingSubscriptionWhereInput
  ) => BookingSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BookingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "checkin_ASC"
  | "checkin_DESC"
  | "checkout_ASC"
  | "checkout_DESC"
  | "totalPaid_ASC"
  | "totalPaid_DESC"
  | "pax_ASC"
  | "pax_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type BlockedDayOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "checkin_ASC"
  | "checkin_DESC"
  | "checkout_ASC"
  | "checkout_DESC"
  | "byBooking_ASC"
  | "byBooking_DESC";

export type AdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "price_ASC"
  | "price_DESC"
  | "ranking_ASC"
  | "ranking_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "role_ASC"
  | "role_DESC"
  | "token_ASC"
  | "token_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface BookingUpdateWithWhereUniqueWithoutClientInput {
  where: BookingWhereUniqueInput;
  data: BookingUpdateWithoutClientDataInput;
}

export type AdWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AdUpdateWithoutBookingsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  price?: Maybe<Int>;
  ranking?: Maybe<Float>;
  host?: Maybe<UserUpdateOneRequiredInput>;
  blockedDays?: Maybe<BlockedDayUpdateManyWithoutAdInput>;
}

export interface BookingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  checkin?: Maybe<DateTimeInput>;
  checkin_not?: Maybe<DateTimeInput>;
  checkin_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkin_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkin_lt?: Maybe<DateTimeInput>;
  checkin_lte?: Maybe<DateTimeInput>;
  checkin_gt?: Maybe<DateTimeInput>;
  checkin_gte?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  checkout_not?: Maybe<DateTimeInput>;
  checkout_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkout_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkout_lt?: Maybe<DateTimeInput>;
  checkout_lte?: Maybe<DateTimeInput>;
  checkout_gt?: Maybe<DateTimeInput>;
  checkout_gte?: Maybe<DateTimeInput>;
  totalPaid?: Maybe<Float>;
  totalPaid_not?: Maybe<Float>;
  totalPaid_in?: Maybe<Float[] | Float>;
  totalPaid_not_in?: Maybe<Float[] | Float>;
  totalPaid_lt?: Maybe<Float>;
  totalPaid_lte?: Maybe<Float>;
  totalPaid_gt?: Maybe<Float>;
  totalPaid_gte?: Maybe<Float>;
  pax?: Maybe<Int>;
  pax_not?: Maybe<Int>;
  pax_in?: Maybe<Int[] | Int>;
  pax_not_in?: Maybe<Int[] | Int>;
  pax_lt?: Maybe<Int>;
  pax_lte?: Maybe<Int>;
  pax_gt?: Maybe<Int>;
  pax_gte?: Maybe<Int>;
  client?: Maybe<UserWhereInput>;
  ad?: Maybe<AdWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BookingWhereInput[] | BookingWhereInput>;
  OR?: Maybe<BookingWhereInput[] | BookingWhereInput>;
  NOT?: Maybe<BookingWhereInput[] | BookingWhereInput>;
}

export interface BlockedDayUpdateManyWithoutAdInput {
  create?: Maybe<
    BlockedDayCreateWithoutAdInput[] | BlockedDayCreateWithoutAdInput
  >;
  delete?: Maybe<BlockedDayWhereUniqueInput[] | BlockedDayWhereUniqueInput>;
  connect?: Maybe<BlockedDayWhereUniqueInput[] | BlockedDayWhereUniqueInput>;
  set?: Maybe<BlockedDayWhereUniqueInput[] | BlockedDayWhereUniqueInput>;
  disconnect?: Maybe<BlockedDayWhereUniqueInput[] | BlockedDayWhereUniqueInput>;
  update?: Maybe<
    | BlockedDayUpdateWithWhereUniqueWithoutAdInput[]
    | BlockedDayUpdateWithWhereUniqueWithoutAdInput
  >;
  upsert?: Maybe<
    | BlockedDayUpsertWithWhereUniqueWithoutAdInput[]
    | BlockedDayUpsertWithWhereUniqueWithoutAdInput
  >;
  deleteMany?: Maybe<BlockedDayScalarWhereInput[] | BlockedDayScalarWhereInput>;
  updateMany?: Maybe<
    | BlockedDayUpdateManyWithWhereNestedInput[]
    | BlockedDayUpdateManyWithWhereNestedInput
  >;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  fullName?: Maybe<String>;
  fullName_not?: Maybe<String>;
  fullName_in?: Maybe<String[] | String>;
  fullName_not_in?: Maybe<String[] | String>;
  fullName_lt?: Maybe<String>;
  fullName_lte?: Maybe<String>;
  fullName_gt?: Maybe<String>;
  fullName_gte?: Maybe<String>;
  fullName_contains?: Maybe<String>;
  fullName_not_contains?: Maybe<String>;
  fullName_starts_with?: Maybe<String>;
  fullName_not_starts_with?: Maybe<String>;
  fullName_ends_with?: Maybe<String>;
  fullName_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  role?: Maybe<String>;
  role_not?: Maybe<String>;
  role_in?: Maybe<String[] | String>;
  role_not_in?: Maybe<String[] | String>;
  role_lt?: Maybe<String>;
  role_lte?: Maybe<String>;
  role_gt?: Maybe<String>;
  role_gte?: Maybe<String>;
  role_contains?: Maybe<String>;
  role_not_contains?: Maybe<String>;
  role_starts_with?: Maybe<String>;
  role_not_starts_with?: Maybe<String>;
  role_ends_with?: Maybe<String>;
  role_not_ends_with?: Maybe<String>;
  bookings_every?: Maybe<BookingWhereInput>;
  bookings_some?: Maybe<BookingWhereInput>;
  bookings_none?: Maybe<BookingWhereInput>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface BlockedDayUpdateWithWhereUniqueWithoutAdInput {
  where: BlockedDayWhereUniqueInput;
  data: BlockedDayUpdateWithoutAdDataInput;
}

export interface BlockedDayWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  checkin?: Maybe<DateTimeInput>;
  checkin_not?: Maybe<DateTimeInput>;
  checkin_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkin_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkin_lt?: Maybe<DateTimeInput>;
  checkin_lte?: Maybe<DateTimeInput>;
  checkin_gt?: Maybe<DateTimeInput>;
  checkin_gte?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  checkout_not?: Maybe<DateTimeInput>;
  checkout_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkout_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkout_lt?: Maybe<DateTimeInput>;
  checkout_lte?: Maybe<DateTimeInput>;
  checkout_gt?: Maybe<DateTimeInput>;
  checkout_gte?: Maybe<DateTimeInput>;
  byBooking?: Maybe<Boolean>;
  byBooking_not?: Maybe<Boolean>;
  ad?: Maybe<AdWhereInput>;
  AND?: Maybe<BlockedDayWhereInput[] | BlockedDayWhereInput>;
  OR?: Maybe<BlockedDayWhereInput[] | BlockedDayWhereInput>;
  NOT?: Maybe<BlockedDayWhereInput[] | BlockedDayWhereInput>;
}

export interface BlockedDayCreateWithoutAdInput {
  id?: Maybe<ID_Input>;
  checkin: DateTimeInput;
  checkout: DateTimeInput;
  byBooking?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutBookingsInput {
  create?: Maybe<UserCreateWithoutBookingsInput>;
  update?: Maybe<UserUpdateWithoutBookingsDataInput>;
  upsert?: Maybe<UserUpsertWithoutBookingsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface BookingCreateManyWithoutAdInput {
  create?: Maybe<BookingCreateWithoutAdInput[] | BookingCreateWithoutAdInput>;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
}

export interface BlockedDayUpdateWithoutAdDataInput {
  checkin?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  byBooking?: Maybe<Boolean>;
}

export interface BookingCreateWithoutAdInput {
  id?: Maybe<ID_Input>;
  checkin: DateTimeInput;
  checkout: DateTimeInput;
  totalPaid: Float;
  pax: Int;
  client: UserCreateOneWithoutBookingsInput;
}

export interface BookingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookingWhereInput>;
  AND?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
  OR?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
  NOT?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
}

export interface UserCreateOneWithoutBookingsInput {
  create?: Maybe<UserCreateWithoutBookingsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface AdSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AdWhereInput>;
  AND?: Maybe<AdSubscriptionWhereInput[] | AdSubscriptionWhereInput>;
  OR?: Maybe<AdSubscriptionWhereInput[] | AdSubscriptionWhereInput>;
  NOT?: Maybe<AdSubscriptionWhereInput[] | AdSubscriptionWhereInput>;
}

export interface UserCreateWithoutBookingsInput {
  id?: Maybe<ID_Input>;
  email: String;
  fullName: String;
  password: String;
  phone: String;
  role: String;
  token?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  fullName?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  role?: Maybe<String>;
  bookings?: Maybe<BookingUpdateManyWithoutClientInput>;
  token?: Maybe<String>;
}

export interface AdUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  price?: Maybe<Int>;
  ranking?: Maybe<Float>;
  host?: Maybe<UserUpdateOneRequiredInput>;
  bookings?: Maybe<BookingUpdateManyWithoutAdInput>;
  blockedDays?: Maybe<BlockedDayUpdateManyWithoutAdInput>;
}

export type BlockedDayWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface BookingCreateInput {
  id?: Maybe<ID_Input>;
  checkin: DateTimeInput;
  checkout: DateTimeInput;
  totalPaid: Float;
  pax: Int;
  client: UserCreateOneWithoutBookingsInput;
  ad: AdCreateOneWithoutBookingsInput;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  fullName?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  role?: Maybe<String>;
  bookings?: Maybe<BookingUpdateManyWithoutClientInput>;
  token?: Maybe<String>;
}

export type BookingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BookingUpdateManyWithoutClientInput {
  create?: Maybe<
    BookingCreateWithoutClientInput[] | BookingCreateWithoutClientInput
  >;
  delete?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  set?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  disconnect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  update?: Maybe<
    | BookingUpdateWithWhereUniqueWithoutClientInput[]
    | BookingUpdateWithWhereUniqueWithoutClientInput
  >;
  upsert?: Maybe<
    | BookingUpsertWithWhereUniqueWithoutClientInput[]
    | BookingUpsertWithWhereUniqueWithoutClientInput
  >;
  deleteMany?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  updateMany?: Maybe<
    | BookingUpdateManyWithWhereNestedInput[]
    | BookingUpdateManyWithWhereNestedInput
  >;
}

export interface AdUpdateWithoutBlockedDaysDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  price?: Maybe<Int>;
  ranking?: Maybe<Float>;
  host?: Maybe<UserUpdateOneRequiredInput>;
  bookings?: Maybe<BookingUpdateManyWithoutAdInput>;
}

export interface AdUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  price?: Maybe<Int>;
  ranking?: Maybe<Float>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface BookingUpdateWithoutClientDataInput {
  checkin?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  totalPaid?: Maybe<Float>;
  pax?: Maybe<Int>;
  ad?: Maybe<AdUpdateOneRequiredWithoutBookingsInput>;
}

export interface AdCreateWithoutBlockedDaysInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  image: String;
  price: Int;
  ranking: Float;
  host: UserCreateOneInput;
  bookings?: Maybe<BookingCreateManyWithoutAdInput>;
}

export interface AdUpdateOneRequiredWithoutBookingsInput {
  create?: Maybe<AdCreateWithoutBookingsInput>;
  update?: Maybe<AdUpdateWithoutBookingsDataInput>;
  upsert?: Maybe<AdUpsertWithoutBookingsInput>;
  connect?: Maybe<AdWhereUniqueInput>;
}

export interface BlockedDayCreateInput {
  id?: Maybe<ID_Input>;
  checkin: DateTimeInput;
  checkout: DateTimeInput;
  byBooking?: Maybe<Boolean>;
  ad: AdCreateOneWithoutBlockedDaysInput;
}

export interface BookingUpsertWithWhereUniqueWithoutAdInput {
  where: BookingWhereUniqueInput;
  update: BookingUpdateWithoutAdDataInput;
  create: BookingCreateWithoutAdInput;
}

export interface AdCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  image: String;
  price: Int;
  ranking: Float;
  host: UserCreateOneInput;
  bookings?: Maybe<BookingCreateManyWithoutAdInput>;
  blockedDays?: Maybe<BlockedDayCreateManyWithoutAdInput>;
}

export interface AdWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  ranking?: Maybe<Float>;
  ranking_not?: Maybe<Float>;
  ranking_in?: Maybe<Float[] | Float>;
  ranking_not_in?: Maybe<Float[] | Float>;
  ranking_lt?: Maybe<Float>;
  ranking_lte?: Maybe<Float>;
  ranking_gt?: Maybe<Float>;
  ranking_gte?: Maybe<Float>;
  host?: Maybe<UserWhereInput>;
  bookings_every?: Maybe<BookingWhereInput>;
  bookings_some?: Maybe<BookingWhereInput>;
  bookings_none?: Maybe<BookingWhereInput>;
  blockedDays_every?: Maybe<BlockedDayWhereInput>;
  blockedDays_some?: Maybe<BlockedDayWhereInput>;
  blockedDays_none?: Maybe<BlockedDayWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AdWhereInput[] | AdWhereInput>;
  OR?: Maybe<AdWhereInput[] | AdWhereInput>;
  NOT?: Maybe<AdWhereInput[] | AdWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  fullName: String;
  password: String;
  phone: String;
  role: String;
  bookings?: Maybe<BookingCreateManyWithoutClientInput>;
  token?: Maybe<String>;
}

export interface UserUpsertWithoutBookingsInput {
  update: UserUpdateWithoutBookingsDataInput;
  create: UserCreateWithoutBookingsInput;
}

export interface BookingCreateWithoutClientInput {
  id?: Maybe<ID_Input>;
  checkin: DateTimeInput;
  checkout: DateTimeInput;
  totalPaid: Float;
  pax: Int;
  ad: AdCreateOneWithoutBookingsInput;
}

export interface UserUpdateWithoutBookingsDataInput {
  email?: Maybe<String>;
  fullName?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  role?: Maybe<String>;
  token?: Maybe<String>;
}

export interface AdCreateWithoutBookingsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  image: String;
  price: Int;
  ranking: Float;
  host: UserCreateOneInput;
  blockedDays?: Maybe<BlockedDayCreateManyWithoutAdInput>;
}

export interface BlockedDayUpsertWithWhereUniqueWithoutAdInput {
  where: BlockedDayWhereUniqueInput;
  update: BlockedDayUpdateWithoutAdDataInput;
  create: BlockedDayCreateWithoutAdInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface BlockedDayScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  checkin?: Maybe<DateTimeInput>;
  checkin_not?: Maybe<DateTimeInput>;
  checkin_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkin_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkin_lt?: Maybe<DateTimeInput>;
  checkin_lte?: Maybe<DateTimeInput>;
  checkin_gt?: Maybe<DateTimeInput>;
  checkin_gte?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  checkout_not?: Maybe<DateTimeInput>;
  checkout_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkout_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkout_lt?: Maybe<DateTimeInput>;
  checkout_lte?: Maybe<DateTimeInput>;
  checkout_gt?: Maybe<DateTimeInput>;
  checkout_gte?: Maybe<DateTimeInput>;
  byBooking?: Maybe<Boolean>;
  byBooking_not?: Maybe<Boolean>;
  AND?: Maybe<BlockedDayScalarWhereInput[] | BlockedDayScalarWhereInput>;
  OR?: Maybe<BlockedDayScalarWhereInput[] | BlockedDayScalarWhereInput>;
  NOT?: Maybe<BlockedDayScalarWhereInput[] | BlockedDayScalarWhereInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  fullName?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  role?: Maybe<String>;
  token?: Maybe<String>;
}

export interface BlockedDayUpdateManyWithWhereNestedInput {
  where: BlockedDayScalarWhereInput;
  data: BlockedDayUpdateManyDataInput;
}

export interface BookingUpdateInput {
  checkin?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  totalPaid?: Maybe<Float>;
  pax?: Maybe<Int>;
  client?: Maybe<UserUpdateOneRequiredWithoutBookingsInput>;
  ad?: Maybe<AdUpdateOneRequiredWithoutBookingsInput>;
}

export interface BlockedDayUpdateManyDataInput {
  checkin?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  byBooking?: Maybe<Boolean>;
}

export interface AdUpsertWithoutBlockedDaysInput {
  update: AdUpdateWithoutBlockedDaysDataInput;
  create: AdCreateWithoutBlockedDaysInput;
}

export interface AdUpsertWithoutBookingsInput {
  update: AdUpdateWithoutBookingsDataInput;
  create: AdCreateWithoutBookingsInput;
}

export interface BlockedDayUpdateInput {
  checkin?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  byBooking?: Maybe<Boolean>;
  ad?: Maybe<AdUpdateOneRequiredWithoutBlockedDaysInput>;
}

export interface BookingUpsertWithWhereUniqueWithoutClientInput {
  where: BookingWhereUniqueInput;
  update: BookingUpdateWithoutClientDataInput;
  create: BookingCreateWithoutClientInput;
}

export interface BookingCreateManyWithoutClientInput {
  create?: Maybe<
    BookingCreateWithoutClientInput[] | BookingCreateWithoutClientInput
  >;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
}

export interface BookingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  checkin?: Maybe<DateTimeInput>;
  checkin_not?: Maybe<DateTimeInput>;
  checkin_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkin_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkin_lt?: Maybe<DateTimeInput>;
  checkin_lte?: Maybe<DateTimeInput>;
  checkin_gt?: Maybe<DateTimeInput>;
  checkin_gte?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  checkout_not?: Maybe<DateTimeInput>;
  checkout_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkout_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  checkout_lt?: Maybe<DateTimeInput>;
  checkout_lte?: Maybe<DateTimeInput>;
  checkout_gt?: Maybe<DateTimeInput>;
  checkout_gte?: Maybe<DateTimeInput>;
  totalPaid?: Maybe<Float>;
  totalPaid_not?: Maybe<Float>;
  totalPaid_in?: Maybe<Float[] | Float>;
  totalPaid_not_in?: Maybe<Float[] | Float>;
  totalPaid_lt?: Maybe<Float>;
  totalPaid_lte?: Maybe<Float>;
  totalPaid_gt?: Maybe<Float>;
  totalPaid_gte?: Maybe<Float>;
  pax?: Maybe<Int>;
  pax_not?: Maybe<Int>;
  pax_in?: Maybe<Int[] | Int>;
  pax_not_in?: Maybe<Int[] | Int>;
  pax_lt?: Maybe<Int>;
  pax_lte?: Maybe<Int>;
  pax_gt?: Maybe<Int>;
  pax_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  OR?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  NOT?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
}

export interface BlockedDayCreateManyWithoutAdInput {
  create?: Maybe<
    BlockedDayCreateWithoutAdInput[] | BlockedDayCreateWithoutAdInput
  >;
  connect?: Maybe<BlockedDayWhereUniqueInput[] | BlockedDayWhereUniqueInput>;
}

export interface BookingUpdateManyWithWhereNestedInput {
  where: BookingScalarWhereInput;
  data: BookingUpdateManyDataInput;
}

export interface BookingUpdateManyMutationInput {
  checkin?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  totalPaid?: Maybe<Float>;
  pax?: Maybe<Int>;
}

export interface BookingUpdateManyDataInput {
  checkin?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  totalPaid?: Maybe<Float>;
  pax?: Maybe<Int>;
}

export interface AdUpdateOneRequiredWithoutBlockedDaysInput {
  create?: Maybe<AdCreateWithoutBlockedDaysInput>;
  update?: Maybe<AdUpdateWithoutBlockedDaysDataInput>;
  upsert?: Maybe<AdUpsertWithoutBlockedDaysInput>;
  connect?: Maybe<AdWhereUniqueInput>;
}

export interface BookingUpdateWithoutAdDataInput {
  checkin?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  totalPaid?: Maybe<Float>;
  pax?: Maybe<Int>;
  client?: Maybe<UserUpdateOneRequiredWithoutBookingsInput>;
}

export interface BookingUpdateWithWhereUniqueWithoutAdInput {
  where: BookingWhereUniqueInput;
  data: BookingUpdateWithoutAdDataInput;
}

export interface BookingUpdateManyWithoutAdInput {
  create?: Maybe<BookingCreateWithoutAdInput[] | BookingCreateWithoutAdInput>;
  delete?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  set?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  disconnect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  update?: Maybe<
    | BookingUpdateWithWhereUniqueWithoutAdInput[]
    | BookingUpdateWithWhereUniqueWithoutAdInput
  >;
  upsert?: Maybe<
    | BookingUpsertWithWhereUniqueWithoutAdInput[]
    | BookingUpsertWithWhereUniqueWithoutAdInput
  >;
  deleteMany?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  updateMany?: Maybe<
    | BookingUpdateManyWithWhereNestedInput[]
    | BookingUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface AdCreateOneWithoutBlockedDaysInput {
  create?: Maybe<AdCreateWithoutBlockedDaysInput>;
  connect?: Maybe<AdWhereUniqueInput>;
}

export interface BlockedDayUpdateManyMutationInput {
  checkin?: Maybe<DateTimeInput>;
  checkout?: Maybe<DateTimeInput>;
  byBooking?: Maybe<Boolean>;
}

export interface BlockedDaySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BlockedDayWhereInput>;
  AND?: Maybe<
    BlockedDaySubscriptionWhereInput[] | BlockedDaySubscriptionWhereInput
  >;
  OR?: Maybe<
    BlockedDaySubscriptionWhereInput[] | BlockedDaySubscriptionWhereInput
  >;
  NOT?: Maybe<
    BlockedDaySubscriptionWhereInput[] | BlockedDaySubscriptionWhereInput
  >;
}

export interface AdCreateOneWithoutBookingsInput {
  create?: Maybe<AdCreateWithoutBookingsInput>;
  connect?: Maybe<AdWhereUniqueInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  fullName: String;
  password: String;
  phone: String;
  role: String;
  token?: String;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  fullName: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  role: () => Promise<String>;
  token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateAd {
  count: Int;
}

export interface AggregateAdPromise extends Promise<AggregateAd>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdSubscription
  extends Promise<AsyncIterator<AggregateAd>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  fullName: String;
  password: String;
  phone: String;
  role: String;
  token?: String;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  fullName: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  role: () => Promise<String>;
  bookings: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  bookings: <T = Promise<AsyncIterator<BookingSubscription>>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  token: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  fullName: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  role: () => Promise<String>;
  bookings: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AdEdge {
  node: Ad;
  cursor: String;
}

export interface AdEdgePromise extends Promise<AdEdge>, Fragmentable {
  node: <T = AdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdEdgeSubscription
  extends Promise<AsyncIterator<AdEdge>>,
    Fragmentable {
  node: <T = AdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Booking {
  id: ID_Output;
  checkin: DateTimeOutput;
  checkout: DateTimeOutput;
  totalPaid: Float;
  pax: Int;
  createdAt: DateTimeOutput;
}

export interface BookingPromise extends Promise<Booking>, Fragmentable {
  id: () => Promise<ID_Output>;
  checkin: () => Promise<DateTimeOutput>;
  checkout: () => Promise<DateTimeOutput>;
  totalPaid: () => Promise<Float>;
  pax: () => Promise<Int>;
  client: <T = UserPromise>() => T;
  ad: <T = AdPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BookingSubscription
  extends Promise<AsyncIterator<Booking>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  checkin: () => Promise<AsyncIterator<DateTimeOutput>>;
  checkout: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalPaid: () => Promise<AsyncIterator<Float>>;
  pax: () => Promise<AsyncIterator<Int>>;
  client: <T = UserSubscription>() => T;
  ad: <T = AdSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BookingNullablePromise
  extends Promise<Booking | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  checkin: () => Promise<DateTimeOutput>;
  checkout: () => Promise<DateTimeOutput>;
  totalPaid: () => Promise<Float>;
  pax: () => Promise<Int>;
  client: <T = UserPromise>() => T;
  ad: <T = AdPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AdConnection {
  pageInfo: PageInfo;
  edges: AdEdge[];
}

export interface AdConnectionPromise
  extends Promise<AdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdEdge>>() => T;
  aggregate: <T = AggregateAdPromise>() => T;
}

export interface AdConnectionSubscription
  extends Promise<AsyncIterator<AdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Ad {
  id: ID_Output;
  title: String;
  description: String;
  image: String;
  price: Int;
  ranking: Float;
  createdAt: DateTimeOutput;
}

export interface AdPromise extends Promise<Ad>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  price: () => Promise<Int>;
  ranking: () => Promise<Float>;
  host: <T = UserPromise>() => T;
  bookings: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blockedDays: <T = FragmentableArray<BlockedDay>>(args?: {
    where?: BlockedDayWhereInput;
    orderBy?: BlockedDayOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AdSubscription
  extends Promise<AsyncIterator<Ad>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  ranking: () => Promise<AsyncIterator<Float>>;
  host: <T = UserSubscription>() => T;
  bookings: <T = Promise<AsyncIterator<BookingSubscription>>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blockedDays: <T = Promise<AsyncIterator<BlockedDaySubscription>>>(args?: {
    where?: BlockedDayWhereInput;
    orderBy?: BlockedDayOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AdNullablePromise extends Promise<Ad | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  price: () => Promise<Int>;
  ranking: () => Promise<Float>;
  host: <T = UserPromise>() => T;
  bookings: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blockedDays: <T = FragmentableArray<BlockedDay>>(args?: {
    where?: BlockedDayWhereInput;
    orderBy?: BlockedDayOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AdSubscriptionPayload {
  mutation: MutationType;
  node: Ad;
  updatedFields: String[];
  previousValues: AdPreviousValues;
}

export interface AdSubscriptionPayloadPromise
  extends Promise<AdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdPreviousValuesPromise>() => T;
}

export interface AdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdPreviousValuesSubscription>() => T;
}

export interface AggregateBooking {
  count: Int;
}

export interface AggregateBookingPromise
  extends Promise<AggregateBooking>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookingSubscription
  extends Promise<AsyncIterator<AggregateBooking>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AdPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  image: String;
  price: Int;
  ranking: Float;
  createdAt: DateTimeOutput;
}

export interface AdPreviousValuesPromise
  extends Promise<AdPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  price: () => Promise<Int>;
  ranking: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AdPreviousValuesSubscription
  extends Promise<AsyncIterator<AdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  ranking: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BookingConnection {
  pageInfo: PageInfo;
  edges: BookingEdge[];
}

export interface BookingConnectionPromise
  extends Promise<BookingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookingEdge>>() => T;
  aggregate: <T = AggregateBookingPromise>() => T;
}

export interface BookingConnectionSubscription
  extends Promise<AsyncIterator<BookingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookingSubscription>() => T;
}

export interface BlockedDay {
  id: ID_Output;
  checkin: DateTimeOutput;
  checkout: DateTimeOutput;
  byBooking?: Boolean;
}

export interface BlockedDayPromise extends Promise<BlockedDay>, Fragmentable {
  id: () => Promise<ID_Output>;
  checkin: () => Promise<DateTimeOutput>;
  checkout: () => Promise<DateTimeOutput>;
  byBooking: () => Promise<Boolean>;
  ad: <T = AdPromise>() => T;
}

export interface BlockedDaySubscription
  extends Promise<AsyncIterator<BlockedDay>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  checkin: () => Promise<AsyncIterator<DateTimeOutput>>;
  checkout: () => Promise<AsyncIterator<DateTimeOutput>>;
  byBooking: () => Promise<AsyncIterator<Boolean>>;
  ad: <T = AdSubscription>() => T;
}

export interface BlockedDayNullablePromise
  extends Promise<BlockedDay | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  checkin: () => Promise<DateTimeOutput>;
  checkout: () => Promise<DateTimeOutput>;
  byBooking: () => Promise<Boolean>;
  ad: <T = AdPromise>() => T;
}

export interface BlockedDayPreviousValues {
  id: ID_Output;
  checkin: DateTimeOutput;
  checkout: DateTimeOutput;
  byBooking?: Boolean;
}

export interface BlockedDayPreviousValuesPromise
  extends Promise<BlockedDayPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  checkin: () => Promise<DateTimeOutput>;
  checkout: () => Promise<DateTimeOutput>;
  byBooking: () => Promise<Boolean>;
}

export interface BlockedDayPreviousValuesSubscription
  extends Promise<AsyncIterator<BlockedDayPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  checkin: () => Promise<AsyncIterator<DateTimeOutput>>;
  checkout: () => Promise<AsyncIterator<DateTimeOutput>>;
  byBooking: () => Promise<AsyncIterator<Boolean>>;
}

export interface BlockedDayEdge {
  node: BlockedDay;
  cursor: String;
}

export interface BlockedDayEdgePromise
  extends Promise<BlockedDayEdge>,
    Fragmentable {
  node: <T = BlockedDayPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BlockedDayEdgeSubscription
  extends Promise<AsyncIterator<BlockedDayEdge>>,
    Fragmentable {
  node: <T = BlockedDaySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BlockedDaySubscriptionPayload {
  mutation: MutationType;
  node: BlockedDay;
  updatedFields: String[];
  previousValues: BlockedDayPreviousValues;
}

export interface BlockedDaySubscriptionPayloadPromise
  extends Promise<BlockedDaySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BlockedDayPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BlockedDayPreviousValuesPromise>() => T;
}

export interface BlockedDaySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BlockedDaySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BlockedDaySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BlockedDayPreviousValuesSubscription>() => T;
}

export interface BlockedDayConnection {
  pageInfo: PageInfo;
  edges: BlockedDayEdge[];
}

export interface BlockedDayConnectionPromise
  extends Promise<BlockedDayConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BlockedDayEdge>>() => T;
  aggregate: <T = AggregateBlockedDayPromise>() => T;
}

export interface BlockedDayConnectionSubscription
  extends Promise<AsyncIterator<BlockedDayConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BlockedDayEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBlockedDaySubscription>() => T;
}

export interface AggregateBlockedDay {
  count: Int;
}

export interface AggregateBlockedDayPromise
  extends Promise<AggregateBlockedDay>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBlockedDaySubscription
  extends Promise<AsyncIterator<AggregateBlockedDay>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BookingEdge {
  node: Booking;
  cursor: String;
}

export interface BookingEdgePromise extends Promise<BookingEdge>, Fragmentable {
  node: <T = BookingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookingEdgeSubscription
  extends Promise<AsyncIterator<BookingEdge>>,
    Fragmentable {
  node: <T = BookingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BookingSubscriptionPayload {
  mutation: MutationType;
  node: Booking;
  updatedFields: String[];
  previousValues: BookingPreviousValues;
}

export interface BookingSubscriptionPayloadPromise
  extends Promise<BookingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookingPreviousValuesPromise>() => T;
}

export interface BookingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookingPreviousValuesSubscription>() => T;
}

export interface BookingPreviousValues {
  id: ID_Output;
  checkin: DateTimeOutput;
  checkout: DateTimeOutput;
  totalPaid: Float;
  pax: Int;
  createdAt: DateTimeOutput;
}

export interface BookingPreviousValuesPromise
  extends Promise<BookingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  checkin: () => Promise<DateTimeOutput>;
  checkout: () => Promise<DateTimeOutput>;
  totalPaid: () => Promise<Float>;
  pax: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BookingPreviousValuesSubscription
  extends Promise<AsyncIterator<BookingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  checkin: () => Promise<AsyncIterator<DateTimeOutput>>;
  checkout: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalPaid: () => Promise<AsyncIterator<Float>>;
  pax: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Ad",
    embedded: false
  },
  {
    name: "Booking",
    embedded: false
  },
  {
    name: "BlockedDay",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "ModelTypes",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://us1.prisma.sh/yanier-alfonso/musala-proyect/dev`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
